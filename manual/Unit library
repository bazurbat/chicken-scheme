[[tags: manual]]
[[toc:]]

== Unit library

This unit contains basic Scheme definitions. This unit is used by default,
unless the program is compiled with the {{-explicit-use}} option.

=== Arithmetic


==== add1/sub1

<procedure>(add1 N)</procedure>
<procedure>(sub1 N)</procedure>

Adds/subtracts 1 from {{N}}.


==== Binary integer operations

<procedure>(bitwise-and N1 ...)</procedure>
<procedure>(bitwise-ior N1 ...)</procedure>
<procedure>(bitwise-xor N1 ...)</procedure>
<procedure>(bitwise-not N)</procedure>
<procedure>(arithmetic-shift N1 N2)</procedure>

Binary integer operations. {{arithmetic-shift}} shifts the argument {{N1}} by
{{N2}} bits to the left. If {{N2}} is negative, then {{N1}} is shifted to the
right. These operations only accept exact integers or inexact integers in word
range (32 bit signed on 32-bit platforms, or 64 bit signed on 64-bit
platforms).

==== bit-set?

<procedure>(bit-set? N INDEX)</procedure>

Returns {{#t}} if the bit at the position {{INDEX}} in the integer {{N}} is
set, or {{#f}} otherwise. The rightmost/least-significant bit is bit 0.

==== Arithmetic fixnum operations

<procedure>(fx+ N1 N2)</procedure>
<procedure>(fx- N1 N2)</procedure>
<procedure>(fx* N1 N2)</procedure>
<procedure>(fx/ N1 N2)</procedure>
<procedure>(fxmod N1 N2)</procedure>
<procedure>(fxneg N)</procedure>
<procedure>(fxmin N1 N2)</procedure>
<procedure>(fxmax N1 N2)</procedure>
<procedure>(fxand N1 N2)</procedure>
<procedure>(fxior N1 N2)</procedure>
<procedure>(fxxor N1 N2)</procedure>
<procedure>(fxnot N)</procedure>
<procedure>(fxshl N1 N2)</procedure>
<procedure>(fxshr N1 N2)</procedure>

{{fx+}} and friends are arithmetic fixnum operations.  These procedures do not
check their arguments, so non-fixnum parameters will result in incorrect
results. {{fxneg}} negates its argument.

On division by zero, {{fx/}} and {{fxmod}} signal a condition of kind
{{(exn arithmetic)}}.

{{fxshl}} and {{fxshr}} perform arithmetic shift left and right,
respectively.

==== Fixnum comparison and predicates

<procedure>(fxodd? N)</procedure>
<procedure>(fxeven? N)</procedure>
<procedure>(fx= N1 N2)</procedure>
<procedure>(fx> N1 N2)</procedure>
<procedure>(fx< N1 N2)</procedure>
<procedure>(fx>= N1 N2)</procedure>
<procedure>(fx<= N1 N2)</procedure>

Comparison of fixnums and predicates on them.

==== fixnum?

<procedure>(fixnum? X)</procedure>

Returns {{#t}} if {{X}} is a fixnum, or {{#f}} otherwise.

==== Fixnum limits

<constant>most-positive-fixnum</constant><br>
<constant>most-negative-fixnum</constant><br>
<constant>fixnum-bits</constant><br>
<constant>fixnum-precision</constant><br>

Platform-specific fixnum limits.

==== Arithmetic floating-point operations

<procedure>(fp+ X Y)</procedure>
<procedure>(fp- X Y)</procedure>
<procedure>(fp* X Y)</procedure>
<procedure>(fp/ X Y)</procedure>
<procedure>(fpneg X)</procedure>
<procedure>(fpmin X Y)</procedure>
<procedure>(fpmax X Y)</procedure>
<procedure>(fp= X Y)</procedure>
<procedure>(fp> X Y)</procedure>
<procedure>(fp< X Y)</procedure>
<procedure>(fp>= X Y)</procedure>
<procedure>(fp<= X Y)</procedure>
<procedure>(fpfloor X)</procedure>
<procedure>(fpceiling X)</procedure>
<procedure>(fptruncate X)</procedure>
<procedure>(fpround X)</procedure>
<procedure>(fpsin X)</procedure>
<procedure>(fpcos X)</procedure>
<procedure>(fptan X)</procedure>
<procedure>(fpasin X)</procedure>
<procedure>(fpacos X)</procedure>
<procedure>(fpatan X)</procedure>
<procedure>(fpatan2 X Y)</procedure>
<procedure>(fplog X)</procedure>
<procedure>(fpexp X)</procedure>
<procedure>(fpexpt X Y)</procedure>
<procedure>(fpsqrt X)</procedure>
<procedure>(fpabs X)</procedure>
<procedure>(fpinteger? X)</procedure>

Arithmetic floating-point operations.

In safe mode, these procedures throw a type error when given non-float
arguments. In unsafe mode, these procedures do not check their
arguments. A non-flonum argument in unsafe mode can crash the
application.

Note: {{fpround}} uses the rounding mode that your C library
implements, which is usually different from R5RS.

==== flonum?

<procedure>(flonum? X)</procedure>

Returns {{#t}} if {{X}} is a flonum, or {{#f}} otherwise.

==== Flonum limits

<constant>maximum-flonum</constant><br>
<constant>minimum-flonum</constant><br>
<constant>flonum-radix</constant><br>
<constant>flonum-epsilon</constant><br>
<constant>flonum-precision</constant><br>
<constant>flonum-decimal-precision</constant><br>
<constant>flonum-maximum-exponent</constant><br>
<constant>flonum-minimum-exponent</constant><br>
<constant>flonum-maximum-decimal-exponent</constant><br>
<constant>flonum-minimum-decimal-exponent</constant><br>

Platform-specific flonum limits.

<procedure>(flonum-print-precision [PRECISION])</procedure>

Gets and sets the number of significant digits printed for a floating-point
number. {{PRECISION}} must be a positive {{fixnum}}.  Returns
the setting that was previously in effect.

The default print precision is 15 on nearly all systems, and 7
on the rare system on which the {{double}} type is only single-precision.

'''Note:''' To ensure read/write invariance for ''all'' floating-point
numbers, you must increase print precision from 15 to 17 (or from 7 to
9).  For example:

 > (define a (expt 2 -53))
 > (define b (+ a (* 2 (expt 10 -32))))
 > (eqv? a b)
 #f
 > (flonum-print-precision 15)
 > (cons a b)
 (1.11022302462516e-16 .
  1.11022302462516e-16)            ;; same printed representation
 > (flonum-print-precision 17)
 > (cons a b)
 (1.1102230246251565e-16 .
  1.1102230246251568e-16)          ;; differs in last place

On the downside, this will result in unnecessarily precise
representations of many numbers:

 > (flonum-print-precision 17)
 > 0.1
 0.10000000000000001

The maximum number of decimal digits required to uniquely represent
all floating-point numbers of a certain precision is given by the
formula {{ceil(1+N*log10(2))}}, where N is the number of bits of
precision; for double-precision, {{N=53}}.

==== finite?

<procedure>(finite? N)</procedure>

Returns {{#f}} if {{N}} is negative or positive infinity, and {{#t}} otherwise.

==== signum

<procedure>(signum N)</procedure>

Returns {{1}} if {{N}} is positive, {{-1}} if {{N}}
is negative or {{0}} if {{N}} is zero. {{signum}} is exactness preserving.



=== File Input/Output

==== current-output-port

<procedure>(current-output-port [PORT])</procedure>

Returns default output port. If {{PORT}} is given, then that port is selected
as the new current output port.

Note that the default output port is not buffered. Use [[Unit posix#Setting the
file buffering mode|{{set-buffering-mode!}}]] if you need a different behavior.

==== current-error-port

<procedure>(current-error-port [PORT])</procedure>

Returns default error output port. If {{PORT}} is given, then that port is
selected as the new current error output port.

Note that the default error output port is not buffered. Use [[Unit
posix#Setting the file buffering mode|{{set-buffering-mode!}}]] if you need a
different behavior.

==== flush-output

<procedure>(flush-output [PORT])</procedure>

Write buffered output to the given output-port. {{PORT}} defaults
to the value of {{(current-output-port)}}.

==== port-closed?

<procedure>(port-closed? PORT)</procedure>

Is the given {{PORT}} closed?

==== port-name

<procedure>(port-name [PORT])</procedure>

Fetch filename from {{PORT}}. This returns the filename that was used to open
this file. Returns a special tag string, enclosed into parentheses for
non-file ports. {{PORT}} defaults to the value of {{(current-input-port)}}.


==== port-position

<procedure>(port-position [PORT])</procedure>

Returns the current position of {{PORT}} as two values: row and column number. 
If the port does not support such an operation an error is signaled. This
procedure is currently only available for input ports. {{PORT}} defaults to the
value of {{(current-input-port)}}.


==== set-port-name!

<procedure>(set-port-name! PORT STRING)</procedure>

Sets the name of {{PORT}} to {{STRING}}.



=== Files

==== delete-file

<procedure>(delete-file STRING)</procedure>

Deletes the file with the pathname {{STRING}}. If the file does
not exist, an error is signaled.


==== directory-exists?

<procedure>(directory-exists? STRING)</procedure>

Returns {{STRING}} if a directory with the given pathname exists, or
{{#f}} otherwise.


==== file-exists?

<procedure>(file-exists? STRING)</procedure>

Returns {{STRING}} if a file or directory with the given pathname exists, or
{{#f}} otherwise.


==== rename-file

<procedure>(rename-file OLD NEW)</procedure>

Renames the file or directory with the pathname {{OLD}} to
{{NEW}}. If the operation does not succeed, an error is signaled.


=== String ports

==== get-output-string

<procedure>(get-output-string PORT)</procedure>

Returns accumulated output of a port created with
{{(open-output-string)}}.


==== open-input-string

<procedure>(open-input-string STRING)</procedure>

Returns a port for reading from {{STRING}}.


==== open-output-string

<procedure>(open-output-string)</procedure>

Returns a port for accumulating output in a string.





=== Feature identifiers


CHICKEN maintains a global list of ''features'' naming functionality available
in the current system. Additionally the {{cond-expand}} form accesses this
feature list to infer what features are provided. Predefined features are
{{chicken}}, and the SRFIs (Scheme Request For Implementation) provided by the
base system: {{srfi-23, srfi-30, srfi-39}}. If the {{eval}} unit
is used (the default), the features {{srfi-0, srfi-2, srfi-6, srfi-8, srfi-9}}
and {{srfi-10}} are defined. When compiling code (during compile-time) the
feature {{compiling}} is registered. When evaluating code in the interpreter
(csi), the feature {{csi}} is registered.


==== features

<procedure>(features)</procedure>

Returns a list of all registered features that will be accepted as valid
feature-identifiers by {{cond-expand}}.


==== feature?

<procedure>(feature? ID ...)</procedure>

Returns {{#t}} if all features with the given feature-identifiers {{ID ...}}
are registered.


==== register-feature!

<procedure>(register-feature! FEATURE ...)</procedure>

Register one or more features that will be accepted as valid
feature-identifiers by {{cond-expand}}. {{FEATURE ...}} may
be a keyword, string or symbol.


==== unregister-feature!

<procedure>(unregister-feature! FEATURE ...)</procedure>

Unregisters the specified feature-identifiers. {{FEATURE ...}}
may be a keyword, string or symbol.





=== Keywords

Keywords are special symbols prefixed with {{#:}} that evaluate
to themselves. Procedures can use keywords to accept optional named
parameters in addition to normal required parameters. Assignment to
and bindings of keyword symbols is not allowed.
The parameter {{keyword-style}} and the compiler/interpreter option
{{-keyword-style}} can be used to allow an additional keyword
syntax, either compatible to Common LISP, or to DSSSL.  As long as this
parameter is set to {{#:suffix}}, CHICKEN conforms to
[[http://srfi.schemers.org/srfi-88/srfi-88.html|SRFI-88]].


==== get-keyword

<procedure>(get-keyword KEYWORD ARGLIST [THUNK])</procedure>

Returns the argument from {{ARGLIST}} specified under the keyword
{{KEYWORD}}. If the keyword is not found, then the zero-argument
procedure {{THUNK}} is invoked and the result value is returned. If
{{THUNK}} is not given, {{#f}} is returned.

<enscript highlight=scheme>
(define (increase x . args)
  (+ x (get-keyword #:amount args (lambda () 1))) )
(increase 123)                                      ==> 124
(increase 123 #:amount 10)                          ==> 133
</enscript>

Note: the {{KEYWORD}} may actually be any kind of object.


==== keyword?

<procedure>(keyword? X)</procedure>

Returns {{#t}} if {{X}} is a keyword symbol, or {{#f}}
otherwise.


==== keyword->string

<procedure>(keyword->string KEYWORD)</procedure>

Transforms {{KEYWORD}} into a string.


==== string->keyword

<procedure>(string->keyword STRING)</procedure>

Returns a keyword with the name {{STRING}}.


=== Environment information and system interface

==== argv

<procedure>(argv)</procedure>

Return a list of all supplied command-line arguments. The first item in
the list is a string containing the name of the executing program. The
other items are the arguments passed to the application. This list is
freshly created on every invocation of {{(argv)}}. It depends on
the host-shell whether arguments are expanded ('globbed') or not.


==== exit

<procedure>(exit [CODE])</procedure>

Exit the running process and return exit-code, which defaults to 0
(Invokes {{exit-handler}}).

Note that pending {{dynamic-wind}} thunks are ''not'' invoked when exiting your program in this way.

==== build-platform

<procedure>(build-platform)</procedure>

Returns a symbol specifying the toolset which has been used for
building the executing system, which is one of the following:

 cygwin
 mingw32
 gnu
 intel
 clang
 sun
 metrowerks
 watcom
 unknown


==== chicken-version

<procedure>(chicken-version [FULL])</procedure>

Returns a string containing the version number of the CHICKEN runtime
system. If the optional argument {{FULL}} is given and true, then
a full version string is returned.


==== errno

<procedure>(errno)</procedure>

Returns the error code of the last system call.


==== get-environment-variable

<procedure>(get-environment-variable STRING)</procedure><br>

Returns the value of the environment variable {{STRING}} or
{{#f}} if that variable is not defined. See also [[http://srfi.schemers.org/srfi-98/|SRFI-98]].

==== machine-byte-order

<procedure>(machine-byte-order)</procedure>

Returns the symbol {{little-endian}} or {{big-endian}}, depending on the
machine's byte-order.


==== machine-type

<procedure>(machine-type)</procedure>

Returns a symbol specifying the processor on which this process is
currently running, which is one of the following:

 arm
 alpha
 mips
 hppa
 ultrasparc
 sparc
 ppc
 ppc64
 ia64
 x86
 x86-64
 unknown


==== on-exit

<procedure>(on-exit THUNK)</procedure>

Schedules the zero-argument procedures {{THUNK}} to be executed before
the process exits, either explicitly via {{exit}} or implicitly after execution
of the last top-level form. Note that finalizers for unreferenced finalized
data are run before exit procedures.


==== software-type

<procedure>(software-type)</procedure>

Returns a symbol specifying the operating system on which this process
is currently running, which is one of the following:

 android
 windows
 unix
 ecos
 unknown


==== software-version

<procedure>(software-version)</procedure>

Returns a symbol specifying the operating system version on which this
process is currently running, which is one of the following:

 linux
 freebsd
 netbsd
 openbsd
 macosx
 hpux
 dragonfly
 haiku
 solaris
 sunos
 aix
 hurd
 unknown



==== c-runtime

<procedure>(c-runtime)</procedure>

Returns a symbol that designates what kind of C runtime library has been linked
with this version of the CHICKEN libraries. Possible return values are
{{static}}, {{dynamic}} or {{unknown}}. On systems not compiled with the
Microsoft C compiler, {{c-runtime}} always returns {{unknown}}.


==== system

<procedure>(system STRING)</procedure>

Execute shell command. The functionality offered by this procedure
depends on the capabilities of the host shell. If the forking of a subprocess
failed, an exception is raised. Otherwise the return status of the
subprocess is returned unaltered.


On a UNIX system, that value is the raw return value of waitpid(2), which contains signal, core dump and exit status.    It is 0 on success.  To pull out the signal number or exit status portably requires POSIX calls, but in a pinch you can use something like this: 

<enscript highlight='scheme'>
;; Returns two values: #t if the process exited normally or #f otherwise;
;; and either the exit status, or the signal number if terminated via signal.
(define (process-status rc)
  (define (wait-signaled? x) (not (= 0 (bitwise-and x 127))))
  (define (wait-signal x) (bitwise-and x 127))
  (define (wait-exit-status x) (arithmetic-shift x -8))
  (if (wait-signaled? rc)
      (values #f (wait-signal rc))
      (values #t (wait-exit-status rc))))

#;> (process-status (system "exit 42"))
#t
42
</enscript>


=== Execution time



==== cpu-time

<procedure>(cpu-time)</procedure>

Returns the used CPU time of the current process in milliseconds as
two values: the time spent in user code, and the time spent in system
code. On platforms where user and system time can not be differentiated,
system time will be always be 0.


==== current-milliseconds

<procedure>(current-milliseconds)</procedure>

Returns the number of milliseconds since process- or machine startup.


==== current-seconds

<procedure>(current-seconds)</procedure>

Returns the number of seconds since midnight, Jan. 1, 1970.


==== current-gc-milliseconds

<procedure>(current-gc-milliseconds)</procedure>

Returns the number of milliseconds spent in major garbage collections since
the last call of {{current-gc-milliseconds}} and returns an exact
integer.



=== Interrupts and error-handling



==== enable-warnings

<procedure>(enable-warnings [BOOL])</procedure>

Enables or disables warnings, depending on wether {{BOOL}} is true or false.
If called with no arguments, this procedure returns {{#t}} if warnings are
currently enabled, or {{#f}} otherwise. Note that this is not a parameter.
The current state (whether warnings are enabled or disabled) is global and not
thread-local.


==== error

<procedure>(error [LOCATION] [STRING] EXP ...)</procedure>

Prints error message, writes all extra arguments to the
value of {{(current-error-port)}} and invokes the
current exception-handler. This conforms to
[[http://srfi.schemers.org/srfi-23/srfi-23.html|SRFI-23]].
If {{LOCATION}} is given and a symbol, it specifies the ''location'' (the name
of the procedure) where the error occurred.



==== get-call-chain

<procedure>(get-call-chain [START [THREAD]])</procedure>

Returns a list with the call history. Backtrace information
is only generated in code compiled without {{-no-trace}} and evaluated code.
If the optional argument {{START}} is given, the backtrace starts
at this offset, i.e. when {{START}} is 1, the next to last trace-entry
is printed, and so on. If the optional argument {{THREAD}} is given, then
the call-chain will only be constructed for calls performed by this thread.



==== print-call-chain

<procedure>(print-call-chain [PORT [START [THREAD [HEADER]]]])</procedure>

Prints a backtrace of the procedure call history to {{PORT}},
which defaults to {{(current-output-port)}}. The output is prefixed by the
{{HEADER}}, which defaults to {{"\n\tCall history:\n"}}.


==== print-error-message

<procedure>(print-error-message EXN [PORT [HEADER]])</procedure>

Prints an appropriate error message to {{PORT}} (which defaults to the value of
{{(current-output-port)}} for the object {{EXN}}. {{EXN}} may be a condition, a
string or any other object. The output is prefixed by the {{HEADER}}, which
defaults to {{"Error:"}}.


==== procedure-information

<procedure>(procedure-information PROC)</procedure>

Returns an s-expression with debug information for the procedure {{PROC}}, or
{{#f}}, if {{PROC}} has no associated debug information.


==== quit

<procedure>(quit [RESULT])</procedure>

In the interpreter {{quit}} exits the currently active read-eval-print loop.
In compiled code, it is equivalent to calling {{exit}}. See also: {{repl}}.


==== reset

<procedure>(reset)</procedure>

Reset program (Invokes {{reset-handler}}).


==== warning

<procedure>(warning STRING EXP ...)</procedure>

Displays a warning message (if warnings are enabled with {{enable-warnings}}) and
continues execution.



=== Garbage collection



==== gc

<procedure>(gc [FLAG])</procedure>

Invokes a garbage-collection and returns the number of free bytes in the heap.
The flag specifies whether a minor ({{#f}}) or major ({{#t}}) GC is to be
triggered. If no argument is given, {{#t}} is assumed. An explicit {{#t}}
argument will cause all pending finalizers to be executed.

==== memory-statistics

<procedure>(memory-statistics)</procedure>

Performs a major garbage collection and returns a three element vector
containing the total heap size in bytes, the number of bytes currently
used and the size of the nursery (the first heap generation). Note
that the actual heap is actually twice the size given in the heap size,
because CHICKEN uses a copying semi-space collector.


==== set-finalizer!

<procedure>(set-finalizer! X PROC)</procedure>

Registers a procedure of one argument {{PROC}}, that will be
called as soon as the non-immediate data object {{X}} is about to
be garbage-collected (with that object as its argument). Note that
the finalizer will '''not''' be called while interrupts are disabled.
This procedure returns {{X}}.

Finalizers are invoked asynchronously, in the thread that happens
to be currently running. Finalizers for data that has become garbage
are called on normal program exit. Finalizers are not run on
abnormal program exit. A normal program exit does not run finalizers
that are still reachable from global data. 

Multiple finalizers can be registered for the same object. The order
in which the finalizers run is undefined. Execution of finalizers
may be nested.


==== set-gc-report!

<procedure>(set-gc-report! FLAG)</procedure>

Print statistics after every GC, depending on {{FLAG}}. A value of
{{#t}} shows statistics after every major GC. A true value different
from {{#t}} shows statistics after every minor GC. {{#f}}
switches statistics off.





=== Other predicates and comparison operations



==== promise?

<procedure>(promise? X)</procedure>

Returns {{#t}} if {{X}} is a promise returned by {{delay}}, or
{{#f}} otherwise.


==== equal=?

<procedure>(equal=? X y)</procedure>

Similar to the standard parocedure {{equal?}}, but compares numbers
using the {{=}} operator, so {{equal=?}} allows structural comparison
in combination with comparison of numerical data by value.



=== String utilities


==== reverse-list->string

<procedure>(reverse-list->string LIST)</procedure>

Returns a string with the characters in {{LIST}} in reverse order. This is
equivalent to {{(list->string (reverse LIST))}}, but much more efficient.



=== Symbols

==== Symbol utilities

===== symbol-append

<procedure>(symbol-append SYMBOL1 ...)</procedure>

Creates a new symbol from the concatenated names of the argument symbols
{{(SYMBOL1 ...)}}.

==== Uninterned symbols ("gensyms")

Symbols may be "interned" or "uninterned". Interned symbols are
registered in a global table, and when read back from a port are
identical to a symbol written before:

<enscript highlight=scheme>
(define sym 'foo)

(eq? sym (with-input-from-string
            (with-output-to-string 
              (lambda () (write sym)))
	    read))

  => #t
</enscript>

Uninterned symbols on the other hand are not globally registered and so
multiple symbols with the same name may coexist:

<enscript highlight=scheme>
(define sym (gensym 'foo))   ; sym is a uninterned symbol like "foo42"

(eq? sym (with-input-from-string    ; the symbol read will be an interned symbol
            (with-output-to-string 
              (lambda () (write sym)))
	    read))

  => #f

(eq? (string->uninterned-symbol "foo") (string->uninterned-symbol "foo"))

  => #f
</enscript>

Use uninterned symbols if you need to generate unique values that
can be compared quickly, for example as keys into a hash-table
or association list. Note that uninterned symbols lose their
uniqueness property when written to a file and read back in, as
in the example above.


===== gensym

<procedure>(gensym [STRING-OR-SYMBOL])</procedure>

Returns a newly created uninterned symbol. If an argument is provided,
the new symbol is prefixed with that argument.


===== string->uninterned-symbol

<procedure>(string->uninterned-symbol STRING)</procedure>

Returns a newly created, unique symbol with the name {{STRING}}.


==== Property lists

As in other Lisp dialects, CHICKEN supports "property lists" associated with symbols.
Properties are accessible via a key that can be any kind of value but which will
be compared using {{eq?}}.

===== get

<procedure>(get SYMBOL PROPERTY [DEFAULT])</procedure>

Returns the value stored under the key {{PROPERTY}} in the property
list of {{SYMBOL}}. If no such property is stored, returns
{{DEFAULT}}. The {{DEFAULT}} is optional and defaults to {{#f}}.

===== put!

<procedure>(put! SYMBOL PROPERTY VALUE)</procedure>
setter: (set! (get SYMBOL PROPERTY) VALUE)

Stores {{VALUE}} under the key {{PROPERTY}} in the property list of
{{SYMBOL}} replacing any previously stored value.

===== remprop!

<procedure>(remprop! SYMBOL PROPERTY)</procedure>

Deletes the first property matching the key {{PROPERTY}} in the property list
of {{SYMBOL}}. Returns {{#t}} when a deletion performed, and {{#f}} otherwise.

===== symbol-plist

<procedure>(symbol-plist SYMBOL)</procedure>
setter: (set! (symbol-plist SYMBOL) LST)

Returns the property list of {{SYMBOL}} or sets it.

===== get-properties

<procedure>(get-properties SYMBOL PROPERTIES)</procedure>

Searches the property list of {{SYMBOL}} for the first property with a key in
the list {{PROPERTIES}}. Returns 3 values: the matching property key, value,
and the tail of property list after the matching property. When no match found
all values are {{#f}}.

{{PROPERTIES}} may also be an atom, in which case it is treated as a list of
one element.


=== Standard Input/Output

==== port?

<procedure>(port? X)</procedure>

Returns {{#t}} if {{X}} is a port object or {{#f}}
otherwise.


==== print

<procedure>(print [EXP1 ...])</procedure>

Outputs the optional arguments {{EXP1 ...}} using {{display}} and
writes a newline character to the port that is the value of
{{(current-output-port)}}. Returns {{(void)}}.


==== print*

<procedure>(print* [EXP1 ...])</procedure>

Similar to {{print}}, but does not output a terminating newline
character and performs a {{flush-output}} after writing its arguments.




=== User-defined named characters

==== char-name

<procedure>(char-name SYMBOL-OR-CHAR [CHAR])</procedure>

This procedure can be used to inquire about character names or to
define new ones. With a single argument the behavior is as follows:
If {{SYMBOL-OR-CHAR}} is a symbol, then {{char-name}} returns
the character with this name, or {{#f}} if no character is defined
under this name. If {{SYMBOL-OR-CHAR}} is a character, then the
name of the character is returned as a symbol, or {{#f}} if the
character has no associated name.

If the optional argument {{CHAR}} is provided, then
{{SYMBOL-OR-CHAR}} should be a symbol that will be the new name of
the given character. If multiple names designate the same character,
then the {{write}} will use the character name that was defined last.

<enscript highlight=scheme>
(char-name 'space)                  ==> #\space
(char-name #\space)                 ==> space
(char-name 'bell)                   ==> #f
(char-name (integer->char 7))       ==> #f
(char-name 'bell (integer->char 7))
(char-name 'bell)                   ==> #\bell
(char->integer (char-name 'bell))   ==> 7
</enscript>



=== Blobs

"blobs" are collections of unstructured bytes. You can't do much
with them, but allow conversion to and from SRFI-4 number vectors.

==== make-blob

<procedure>(make-blob SIZE)</procedure>

Returns a blob object of {{SIZE}} bytes, aligned on an 8-byte boundary,
uninitialized.

==== blob?

<procedure>(blob? X)</procedure>

Returns {{#t}} if {{X}} is a blob object, or
{{#f}} otherwise.

==== blob-size

<procedure>(blob-size BLOB)</procedure>

Returns the number of bytes in {{BLOB}}.

==== blob->string

<procedure>(blob->string BLOB)</procedure>

Returns a string with the contents of {{BLOB}}.

==== string->blob

<procedure>(string->blob STRING)</procedure>

Returns a blob with the contents of {{STRING}}.

==== blob=?

<procedure>(blob=? BLOB1 BLOB2)</procedure>

Returns {{#t}} if the two argument blobs are of the same
size and have the same content.


=== Lists

==== foldl

<procedure>(foldl PROCEDURE INIT LIST)</procedure>

Applies {{PROCEDURE}} to the elements from {{LIST}}, beginning from the left:

<enscript hightlight=scheme>
(foldl + 0 '(1 2 3))    ==>    (+ (+ (+ 0 1) 2) 3)
</enscript>

Note that the order of arguments taken by {{PROCEDURE}} is different
from the {{SRFI-1}} {{fold}} procedure, but matches the more natural
order used in Haskell and Objective Caml.


==== foldr

<procedure>(foldr PROCEDURE INIT LIST)</procedure>

Applies {{PROCEDURE}} to the elements from {{LIST}}, beginning from the right:

<enscript hightlight=scheme>
(foldr + 0 '(1 2 3))    ==>    (+ 1 (+ 2 (+ 3 0)))
</enscript>


=== Vectors

==== vector-copy!

<procedure>(vector-copy! VECTOR1 VECTOR2 [COUNT])</procedure>

Copies contents of {{VECTOR1}} into {{VECTOR2}}. If the
argument {{COUNT}} is given, it specifies the maximal number of
elements to be copied. If not given, the minimum of the lengths of the
argument vectors is copied.

Exceptions: {{(exn bounds)}}


==== vector-resize

<procedure>(vector-resize VECTOR N [INIT])</procedure>

Creates and returns a new vector with the contents of {{VECTOR}} and length
{{N}}. If {{N}} is greater than the original length of {{VECTOR}}, then all
additional items are initialized to {{INIT}}. If {{INIT}} is not specified, the
contents are initialized to some unspecified value.


==== subvector

<procedure>(subvector VECTOR FROM [TO])</procedure>

Returns a new vector with elements taken from {{VECTOR}} in the
given range. {{TO}} defaults to {{(vector-length VECTOR)}}.

{{subvector}} was introduced in CHICKEN 4.7.3.


=== The unspecified value

==== void

<procedure>(void ARGUMENT ...)</procedure>

Ignores {{ARGUMENT ...}} and returns an unspecified value.



=== Continuations

==== call/cc

<procedure>(call/cc PROCEDURE)</procedure>

An alias for {{call-with-current-continuation}}.


==== continuation-capture

<procedure>(continuation-capture PROCEDURE)</procedure>

Creates a continuation object representing the current continuation and
tail-calls {{PROCEDURE}} with this continuation as the single argument.

More information about this continuation API can be found in the paper
[[http://repository.readscheme.org/ftp/papers/sw2001/feeley.pdf]] ''A Better
API for first class Continuations'' by Marc Feeley.


==== continuation?

<procedure>(continuation? X)</procedure>

Returns {{#t}} if {{X}} is a continuation object, or {{#f}} otherwise. Please
note that this applies only to continuations created by the Continuation API,
but not by call/cc, i.e.: {{(call-with-current-continuation continuation?)}}
returns {{#f}}, whereas {{(continuation-capture continuation?)}} returns
{{#t}}.


==== continuation-graft

<procedure>(continuation-graft CONT THUNK)</procedure>

Calls the procedure {{THUNK}} with no arguments and the implicit continuation
{{CONT}}.


==== continuation-return

<procedure>(continuation-return CONT VALUE ...)</procedure>

Returns the value(s) to the continuation {{CONT}}. {{continuation-return}} could
be implemented like this:

<enscript highlight=scheme>
(define (continuation-return k . vals)
  (continuation-graft
    k
    (lambda () (apply values vals)) ) )
</enscript>



=== Setters

SRFI-17 is fully implemented. For more information see:
[[http://srfi.schemers.org/srfi-17/srfi-17.html|SRFI-17]].

==== setter

<procedure>(setter PROCEDURE)</procedure>

Returns the setter-procedure of {{PROCEDURE}}, or signals an error if
{{PROCEDURE}} has no associated setter-procedure.

Note that {{(set! (setter PROC) ...)}} for a procedure that has no associated
setter procedure yet is a very slow operation (the old procedure is replaced by
a modified copy, which involves a garbage collection).


==== getter-with-setter

<procedure>(getter-with-setter GETTER SETTER)</procedure>

Returns a copy of the procedure {{GETTER}} with the associated setter procedure
{{SETTER}}. Contrary to the SRFI specification, the setter of the returned
procedure may be changed.



=== Reader extensions

==== define-reader-ctor

<procedure>(define-reader-ctor SYMBOL PROC)</procedure>

Define new read-time constructor for {{#,}} read syntax. For further information, see
the documentation for [[http://srfi.schemers.org/srfi-10/srfi-10.html|SRFI-10]].


==== set-read-syntax!

<procedure>(set-read-syntax! CHAR-OR-SYMBOL PROC)</procedure>

When the reader encounters the non-whitespace character {{CHAR}} while reading
an expression from a given port, then the procedure {{PROC}} will be called with
that port as its argument. The procedure should return a value that will be returned
to the reader:

<enscript highlight=scheme>
 ; A simple RGB color syntax:

 (set-read-syntax! #\%
   (lambda (port)
     (apply vector
       (map (cut string->number <> 16)
	    (string-chop (read-string 6 port) 2) ) ) ) )

 (with-input-from-string "(1 2 %f0f0f0 3)" read)
 ; ==> (1 2 #(240 240 240) 3)
</enscript>

If {{CHAR-OR-SYMBOL}} is a symbol, then a so-called ''read-mark'' handler is defined.
In that case the handler procedure will be called when a character-sequence of the
form {{#!SYMBOL}} is encountered.

You can undo special handling of read-syntax by passing {{#f}} as the second argument
(if the syntax was previously defined via {{set-read-syntax!}}).

As a special case, your handler can return zero values, via {{(values)}}.  This causes
the reader to completely ignore whatever input you've read, rather than returning some
possibly unspecified value.  This can be useful in macro context, reading comments,
conditional compilation, and so forth.  Available in CHICKEN 4.6.6 and later.

Note that all of CHICKEN's special non-standard read-syntax is handled directly by the reader.
To disable built-in read-syntax, define a handler that triggers an error (for example).


==== set-sharp-read-syntax!

<procedure>(set-sharp-read-syntax! CHAR-OR-SYMBOL PROC)</procedure>

Similar to {{set-read-syntax!}}, but allows defining new {{#<CHAR> ...}} reader syntax.
If the first argument is a symbol, then this procedure is equivalent to {{set-read-syntax!}}.

{{PROC}} may be {{#f}} to disable previously defined "sharp" read syntax.


==== set-parameterized-read-syntax!

<procedure>(set-parameterized-read-syntax! CHAR-OR-SYMBOL PROC)</procedure>

Similar to {{set-sharp-read-syntax!}}, but intended for defining reader syntax of the
form {{#<NUMBER><CHAR> ...}}. The handler procedure {{PROC}} will be called with two
arguments: the input port and the number preceding
the dispatching character.
If the first argument is a symbol, then this procedure is equivalent to {{set-read-syntax!}}.

{{PROC}} may be {{#f}} to disable previously defined parameterized read syntax.


==== copy-read-table

<procedure>(copy-read-table READ-TABLE)</procedure>

Returns a copy of the given read-table. You can access the currently active read-table
with {{(current-read-table)}}.



----
Previous: [[Exceptions]] Next: [[Unit eval]]
