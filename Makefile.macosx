# Makefile.macosx - configuration for Apple Macintosh OS X -*- Makefile -*-
#
# Copyright (c) 2008-2014, The Chicken Team
# Copyright (c) 2007, Felix L. Winkelmann
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following
# conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this list of conditions and the following
#     disclaimer. 
#   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
#     disclaimer in the documentation and/or other materials provided with the distribution. 
#   Neither the name of the author nor the names of its contributors may be used to endorse or promote
#     products derived from this software without specific prior written permission. 
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
# OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

SRCDIR ?= ./

# platform configuration

XCODE_DEVELOPER ?= /Applications/Xcode.app/Contents/Developer
XCODE_TOOL_PATH ?= $(XCODE_DEVELOPER)/Toolchains/XcodeDefault.xctoolchain/usr/bin
C_COMPILER ?= $(XCODE_DEVELOPER)/usr/bin/gcc
ARCH ?= $(shell sh $(SRCDIR)/config-arch.sh)

# commands

POSTINSTALL_PROGRAM = $(XCODE_TOOL_PATH)/install_name_tool

# options

C_COMPILER_OPTIONS ?= -fno-strict-aliasing -fwrapv -fno-common -DHAVE_CHICKEN_CONFIG_H
ifdef DEBUGBUILD
C_COMPILER_OPTIMIZATION_OPTIONS ?= -g -Wall -Wno-unused
else
ifdef OPTIMIZE_FOR_SPEED
C_COMPILER_OPTIMIZATION_OPTIONS ?= -O3 -fomit-frame-pointer
else
C_COMPILER_OPTIMIZATION_OPTIONS ?= -Os -fomit-frame-pointer
endif
endif
LIBRARIAN ?= $(XCODE_TOOL_PATH)/ar
LINKER_LINK_SHARED_LIBRARY_OPTIONS = -dynamiclib -compatibility_version 1 -current_version 1.0 -install_name $@
POSTINSTALL_PROGRAM_FLAGS = -change lib$(PROGRAM_PREFIX)chicken$(PROGRAM_SUFFIX)$(SO) $(LIBDIR)/lib$(PROGRAM_PREFIX)chicken$(PROGRAM_SUFFIX)$(SO)
LIBRARIAN_OPTIONS = scru
LINKER_LINK_SHARED_DLOADABLE_OPTIONS = -bundle -L.
ASSEMBLER_OPTIONS =

# file extensions

SO = .dylib

# special files

CHICKEN_CONFIG_H = chicken-config.h
APPLY_HACK_OBJECT = apply-hack.$(ARCH)$(O)
HACKED_APPLY ?= 1

# architectures

ifeq ($(ARCH),x86-64)
C_COMPILER_OPTIONS += -m64
LINKER_OPTIONS += -m64
# Avoid bus error in install_name_tool
LINKER_LINK_SHARED_DLOADABLE_OPTIONS += -Wl,-headerpad -Wl,128
else

ifeq ($(ARCH),universal)
C_COMPILER_OPTIONS += -arch ppc -arch i386 -isysroot /Developer/SDKs/MacOSX10.4u.sdk
LINKER_OPTIONS += -arch ppc -arch i386 -isysroot /Developer/SDKs/MacOSX10.4u.sdk
endif

endif

# select default and internal settings

include $(SRCDIR)/defaults.make

chicken-config.h: chicken-defaults.h
	echo "/* GENERATED */" >$@
	echo "#define HAVE_DIRENT_H 1" >>$@
	echo "#define HAVE_DLFCN_H 1" >>$@
	echo "#define HAVE_INTTYPES_H 1" >>$@
	echo "#define HAVE_LIMITS_H 1" >>$@
	echo "#define HAVE_LONG_LONG 1" >>$@
	echo "#define HAVE_MEMMOVE 1" >>$@
	echo "#define HAVE_MEMORY_H 1" >>$@
	echo "#define HAVE_POSIX_POLL 1" >>$@
	echo "#define HAVE_SIGACTION 1" >>$@
	echo "#define HAVE_SIGSETJMP 1" >>$@
	echo "#define HAVE_SIGPROCMASK 1" >>$@
	echo "#define HAVE_STDINT_H 1" >>$@
	echo "#define HAVE_STDLIB_H 1" >>$@
	echo "#define HAVE_STRERROR 1" >>$@
	echo "#define HAVE_STRINGS_H 1" >>$@
	echo "#define HAVE_STRING_H 1" >>$@
	echo "#define HAVE_STRLCAT 1" >>$@
	echo "#define HAVE_STRLCPY 1" >>$@
	echo "#define HAVE_STRTOLL 1" >>$@
	echo "#define HAVE_STRTOQ 1" >>$@
	echo "#define HAVE_SYS_STAT_H 1" >>$@
	echo "#define HAVE_SYS_TYPES_H 1" >>$@
	echo "#define HAVE_SETENV 1" >>$@
	echo "#define HAVE_UNISTD_H 1" >>$@
	echo "#define HAVE_UNSIGNED_LONG_LONG 1" >>$@
	echo "#define STDC_HEADERS 1" >>$@
	echo "#define HAVE_ALLOCA 1" >>$@
	echo "#define HAVE_ALLOCA_H 1" >>$@
	echo "#define HAVE_GRP_H 1" >>$@
	echo "#define HAVE_CRT_EXTERNS_H 1" >>$@
	echo "#define HAVE_ERRNO_H 1" >>$@
	echo "#define HAVE_SYSEXITS_H 1" >>$@
	echo "#define C_STACK_GROWS_DOWNWARD 1" >>$@
ifdef GCHOOKS
	echo "#define C_GC_HOOKS" >>$@
endif
ifdef SYMBOLGC
	echo "#define C_COLLECT_ALL_SYMBOLS" >>$@
endif
ifneq ($(HACKED_APPLY),)
	echo "#define C_HACKED_APPLY" >>$@
endif
	cat chicken-defaults.h >>$@

ifeq ($(ARCH),universal)
ifneq ($(HACKED_APPLY),)
# We undefine HACKED_APPLY in order to override rules.make
# with our own build rules.
HACKED_APPLY=
apply-hack.ppc.darwin$(O): $(SRCDIR)apply-hack.ppc.darwin.S
	$(ASSEMBLER) $(ASSEMBLER_OPTIONS) -arch ppc \
           $(ASSEMBLER_COMPILE_OPTION) $< $(ASSEMBLER_OUTPUT)
apply-hack.x86$(O): $(SRCDIR)apply-hack.x86.S
	$(ASSEMBLER) $(ASSEMBLER_OPTIONS) -arch i386 \
           $(ASSEMBLER_COMPILE_OPTION) $< $(ASSEMBLER_OUTPUT)
$(APPLY_HACK_OBJECT): apply-hack.x86$(O) apply-hack.ppc.darwin$(O)
	lipo -create -output $@ $^
endif
endif

include $(SRCDIR)/rules.make
