(import scheme chicken)
(use data-structures extras)

(define (get-imports ls)
  (when (pair? ls)
    (let ((first (car ls))
          (rest  (cdr ls)))
      (case first
        ((import use requre require-extension require-library)
         (for-each (lambda (e)
                     (if (pair? e)
                       (case (car e)
                         ((only except rename prefix)
                          (printf "~A " (cadr e))))
                       (printf "~A " e)))
                   rest))
        ((include)
         (printf "~A " (car rest)))
        (else
          (get-imports first)
          (get-imports rest))))))

(define (extract-imports)
  (let ((e (read)))
    (unless (eof-object? e)
      (get-imports e)
      (extract-imports))))

(define (main args)
  (define in-file (car args))
  (define out-file (cadr args))
  (define (write-imports)
    (write-string "set(depends ")
    (handle-exceptions exn (begin)
                       (with-input-from-file in-file extract-imports))
    (write-string ")")
    (newline))
  (and (file-exists? out-file) (delete-file out-file))
  (with-output-to-file out-file write-imports))
