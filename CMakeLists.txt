cmake_minimum_required(VERSION 2.8)
cmake_policy(VERSION 2.8)

# search for CMake includes in project directory first
set(CMAKE_MODULE_PATH ${CMAKE_HOME_DIRECTORY}/cmake CACHE INTERNAL "")
# override default platform compiler flags
set(CMAKE_USER_MAKE_RULES_OVERRIDE
    ${CMAKE_HOME_DIRECTORY}/cmake/ChickenPlatformOverride.cmake)

project(chicken C ASM)

find_package(Chicken REQUIRED)
include(ChickenBuildTag)
include(ChickenConfigure)

# use chicken-config.h generated by configure instead of the default
include_directories(BEFORE ${CMAKE_CURRENT_BINARY_DIR})

set(libchicken_C_SOURCES chicken.h runtime.c ${CHICKEN_APPLY_HACK})

if(WIN32)
    set(posix_scm posixwin.scm)
else()
    set(posix_scm posixunix.scm)
endif()

set(libchicken_SCM_SOURCES library.scm eval.scm data-structures.scm ports.scm
    files.scm extras.scm lolevel.scm utils.scm tcp.scm srfi-1.scm srfi-4.scm
    srfi-13.scm srfi-14.scm srfi-18.scm ${posix_scm} irregex.scm
    scheduler.scm profiler.scm stub.scm expand.scm modules.scm
    chicken-syntax.scm chicken-ffi-syntax.scm build-version.scm)

set(chicken_SCM_SOURCES chicken.scm batch-driver.scm compiler.scm
    optimizer.scm compiler-syntax.scm scrutinizer.scm support.scm
    c-platform.scm c-backend.scm lfa2.scm)

set(utility_PROGRAMS csc chicken-install chicken-uninstall chicken-status
    chicken-profile)

set(setupapi_MODULES setup-api setup-download)

set(import_LIBRARIES
    chicken.import lolevel.import srfi-1.import srfi-4.import
    data-structures.import ports.import files.import posix.import
    srfi-13.import srfi-69.import extras.import srfi-14.import tcp.import
    foreign.import srfi-18.import utils.import csi.import irregex.import)

add_chicken_sources(libchicken_SOURCES
    C_SOURCES ${libchicken_C_SOURCES})
add_chicken_sources(libchicken_SOURCES
    SOURCES ${libchicken_SCM_SOURCES}
    OPTIONS ${LIBRARY_OPTIONS})
add_chicken_sources(libchicken_SOURCES srfi-69.scm
    OPTIONS ${LIBRARY_OPTIONS} -extend private-namespace.scm)

add_library(libchicken SHARED ${libchicken_SOURCES})
target_link_libraries(libchicken ${CHICKEN_EXTRA_LIBRARIES})

set(CHICKEN_LIBRARIES libchicken ${CHICKEN_EXTRA_LIBRARIES})

set_property(TARGET libchicken PROPERTY COMPILE_DEFINITIONS
    PIC C_BUILDING_LIBCHICKEN)

set_target_properties(libchicken PROPERTIES
    PREFIX ""
    OUTPUT_NAME lib${CHICKEN_PROGRAM_PREFIX}chicken
    VERSION ${API_VERSION})

add_chicken_executable(chicken ${chicken_SCM_SOURCES}
    OPTIONS ${COMPILER_OPTIONS})

set_target_properties(chicken PROPERTIES
    COMPILE_DEFINITIONS PIC
    OUTPUT_NAME ${CHICKEN_PROGRAM_PREFIX}chicken)

add_chicken_executable(csi
    SOURCES csi.scm
    OPTIONS ${PROGRAM_OPTIONS} -extend private-namespace.scm)

set_target_properties(csi PROPERTIES
    COMPILE_DEFINITIONS PIC
    OUTPUT_NAME ${CHICKEN_PROGRAM_PREFIX}csi)

foreach(program ${utility_PROGRAMS})
    add_chicken_executable(${program} ${program}.scm
        OPTIONS ${PROGRAM_OPTIONS})

    set_target_properties(${program} PROPERTIES
        COMPILE_DEFINITIONS PIC
        OUTPUT_NAME ${CHICKEN_PROGRAM_PREFIX}${program})
endforeach()

install(TARGETS libchicken chicken csi ${utility_PROGRAMS}
    EXPORT chicken-targets
    LIBRARY DESTINATION ${INSTALL_LIBDIR}
    RUNTIME DESTINATION ${INSTALL_BINDIR})

if(BUILD_STATIC_LIBS)

add_chicken_sources(libchicken_STATIC_SOURCES
    C_SOURCES ${libchicken_C_SOURCES})
add_chicken_sources(libchicken_STATIC_SOURCES STATIC
    SOURCES ${libchicken_SCM_SOURCES}
    OPTIONS ${LIBRARY_OPTIONS})
add_chicken_sources(libchicken_STATIC_SOURCES srfi-69.scm STATIC
    OPTIONS ${LIBRARY_OPTIONS} -extend private-namespace.scm)

add_library(libchicken-static STATIC ${libchicken_STATIC_SOURCES})

set_property(TARGET libchicken-static PROPERTY COMPILE_DEFINITIONS
    PIC C_BUILDING_LIBCHICKEN)

set_target_properties(libchicken-static PROPERTIES
    PREFIX ""
    OUTPUT_NAME lib${CHICKEN_PROGRAM_PREFIX}chicken)

install(TARGETS libchicken-static
    EXPORT chicken-targets
    ARCHIVE DESTINATION ${INSTALL_LIBDIR})

set(CHICKEN_STATIC_LIBRARIES libchicken-static ${CHICKEN_EXTRA_LIBRARIES})

endif(BUILD_STATIC_LIBS)

if(BUILD_STATIC_PROGRAMS)
    add_chicken_executable(csi-static csi.scm STATIC
        OPTIONS ${PROGRAM_OPTIONS} -extend private-namespace.scm)
    set_target_properties(csi-static PROPERTIES
        OUTPUT_NAME ${CHICKEN_PROGRAM_PREFIX}csi-static)

    add_chicken_executable(chicken-bug chicken-bug.scm STATIC
        OPTIONS ${PROGRAM_OPTIONS})
    set_target_properties(chicken-bug PROPERTIES
        OUTPUT_NAME ${CHICKEN_PROGRAM_PREFIX}chicken-bug)

    install(TARGETS csi-static chicken-bug
        RUNTIME DESTINATION ${INSTALL_BINDIR})
endif()

add_chicken_module(setup-api setup-api.scm
    EMIT setup-api
    OPTIONS ${LIBRARY_OPTIONS})
add_chicken_module(setup-download setup-download.scm
    EMIT setup-download
    OPTIONS ${LIBRARY_OPTIONS}
    DEPENDS setup-api.import)

add_dependencies(chicken-install ${setupapi_MODULES})
add_dependencies(chicken-uninstall ${setupapi_MODULES})
add_dependencies(chicken-status ${setupapi_MODULES})

foreach(module ${setupapi_MODULES})
    install(TARGETS ${module} ${module}.import
        LIBRARY DESTINATION ${INSTALL_EGGDIR})
endforeach()

foreach(lib ${import_LIBRARIES})
    add_chicken_library(${lib} ${lib}.scm MODULE
        OPTIONS ${IMPORT_LIBRARY_OPTIONS})
endforeach()

install(TARGETS ${import_LIBRARIES}
    DESTINATION ${INSTALL_EGGDIR})

# config
include(CMakePackageConfigHelpers)

configure_package_config_file(cmake/chicken-config.cmake.in
    ${PROJECT_BINARY_DIR}/chicken-config.cmake
    INSTALL_DESTINATION ${INSTALL_DATADIR}
    PATH_VARS INSTALL_BINDIR INSTALL_LIBDIR INSTALL_EGGDIR INSTALL_DATADIR)

write_basic_package_version_file(
    ${PROJECT_BINARY_DIR}/chicken-config-version.cmake
    VERSION ${CHICKEN_VERSION}
    COMPATIBILITY SameMajorVersion)

# misc files
install(FILES types.db
    DESTINATION ${INSTALL_EGGDIR})

install(FILES chicken.h ${CHICKEN_CONFIG_H}
    DESTINATION ${INSTALL_INCLUDEDIR})

install(FILES setup.defaults
    DESTINATION ${INSTALL_DATADIR})

install(FILES ${PROJECT_BINARY_DIR}/chicken-config.cmake
    DESTINATION ${INSTALL_DATADIR}
    RENAME ${_chicken_program_prefix}chicken-config.cmake)
install(FILES ${PROJECT_BINARY_DIR}/chicken-config-version.cmake
    DESTINATION ${INSTALL_DATADIR}
    RENAME ${_chicken_program_prefix}chicken-config-version.cmake)

set(MAN_PAGES chicken csc csi chicken-install chicken-uninstall
    chicken-status chicken-profile chicken-bug)
foreach(man ${MAN_PAGES})
    install(FILES ${man}.1
        DESTINATION ${INSTALL_MANDIR}
        RENAME ${CHICKEN_PROGRAM_PREFIX}${man}.1)
endforeach()

install(FILES README LICENSE
    DESTINATION ${INSTALL_DOCDIR})

install(EXPORT chicken-targets
    DESTINATION ${INSTALL_DATADIR})
