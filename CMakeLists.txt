cmake_minimum_required(VERSION 2.8.4)
cmake_policy(VERSION 2.8)
if(POLICY CMP0042)
    cmake_policy(SET CMP0042 NEW)
endif()

enable_testing()

# search for CMake includes in project directory first
set(CMAKE_MODULE_PATH ${CMAKE_HOME_DIRECTORY}/cmake CACHE INTERNAL "")
# override default platform compiler flags
set(CMAKE_USER_MAKE_RULES_OVERRIDE
    ${CMAKE_HOME_DIRECTORY}/cmake/ChickenPlatformOverride.cmake)

project(chicken C ASM)

find_package(Chicken REQUIRED)
include(ChickenBuildTag)
include(ChickenConfigure)

set(CHICKEN_EXTRACT_DEPENDS YES)

set(CHICKEN_RUN ${CMAKE_SOURCE_DIR}/cmake/ChickenRun.cmake)
set(CHICKEN_EXTRACT_SCRIPT ${CMAKE_SOURCE_DIR}/cmake/extract-depends.scm)

add_custom_target(tests)

# use chicken-config.h generated by configure instead of the default
include_directories(BEFORE ${CMAKE_CURRENT_BINARY_DIR})

set(libchicken_C_SOURCES chicken.h runtime.c ${CHICKEN_APPLY_HACK})

if(WIN32)
    set(posix_scm posixwin.scm)
else()
    set(posix_scm posixunix.scm)
endif()

set(libchicken_SCM_SOURCES
    ${posix_scm}
    build-version.scm
    chicken-ffi-syntax.scm
    chicken-syntax.scm
    data-structures.scm
    eval.scm
    expand.scm
    extras.scm
    files.scm
    irregex.scm
    library.scm
    lolevel.scm
    modules.scm
    ports.scm
    profiler.scm
    scheduler.scm
    srfi-1.scm
    srfi-4.scm
    stub.scm
    tcp.scm
    utils.scm
)

set(utility_PROGRAMS
    chicken-install
    chicken-profile
    chicken-status
    chicken-uninstall
    csc
)

set(setupapi_MODULES setup-api setup-download)

# runtime

add_chicken_sources(libchicken_SOURCES
    C_SOURCES ${libchicken_C_SOURCES})
add_chicken_sources(libchicken_SOURCES
    SOURCES ${libchicken_SCM_SOURCES}
    OPTIONS ${LIBRARY_OPTIONS})

add_library(libchicken SHARED ${libchicken_SOURCES})
target_link_libraries(libchicken ${CHICKEN_EXTRA_LIBRARIES})

set(CHICKEN_LIBRARIES libchicken ${CHICKEN_EXTRA_LIBRARIES})

set_property(TARGET libchicken PROPERTY COMPILE_DEFINITIONS
    PIC C_BUILDING_LIBCHICKEN)

set_target_properties(libchicken PROPERTIES
    PREFIX ""
    OUTPUT_NAME lib${CHICKEN_PROGRAM_PREFIX}chicken
    VERSION ${API_VERSION})

# compiler

set(compiler_MODULES
    batch-driver
    c-backend
    c-platform
    compiler-syntax
    core
    lfa2
    optimizer
    scrutinizer
    support
)

set(compiler_SOURCES)

foreach(m ${compiler_MODULES})
    add_chicken_sources(compiler_SOURCES ${m}.scm
        EMIT_IMPORTS chicken.compiler.${m}
        ${ARGN})
endforeach()

add_chicken_executable(chicken-compiler
    SOURCES chicken.scm
    C_SOURCES ${compiler_SOURCES}
    OPTIONS ${COMPILER_OPTIONS})

set_target_properties(chicken-compiler PROPERTIES
    COMPILE_DEFINITIONS PIC
    OUTPUT_NAME ${CHICKEN_PROGRAM_PREFIX}chicken)

add_chicken_executable(csi
    SOURCES csi.scm
    OPTIONS ${PROGRAM_OPTIONS})

set_target_properties(csi PROPERTIES
    COMPILE_DEFINITIONS PIC
    OUTPUT_NAME ${CHICKEN_PROGRAM_PREFIX}csi)

foreach(program ${utility_PROGRAMS})
    add_chicken_executable(${program} ${program}.scm
        OPTIONS ${PROGRAM_OPTIONS})

    set_target_properties(${program} PROPERTIES
        COMPILE_DEFINITIONS PIC
        OUTPUT_NAME ${CHICKEN_PROGRAM_PREFIX}${program})
endforeach()

install(TARGETS libchicken chicken-compiler csi ${utility_PROGRAMS}
    EXPORT chicken-targets
    ARCHIVE DESTINATION ${INSTALL_LIBDIR}
    LIBRARY DESTINATION ${INSTALL_LIBDIR}
    RUNTIME DESTINATION ${INSTALL_BINDIR})

if(BUILD_STATIC_LIBS)

add_chicken_sources(libchicken_STATIC_SOURCES
    C_SOURCES ${libchicken_C_SOURCES})
add_chicken_sources(libchicken_STATIC_SOURCES STATIC
    SOURCES ${libchicken_SCM_SOURCES}
    OPTIONS ${LIBRARY_OPTIONS})

add_library(libchicken-static STATIC ${libchicken_STATIC_SOURCES})

set_property(TARGET libchicken-static PROPERTY COMPILE_DEFINITIONS
    PIC C_BUILDING_LIBCHICKEN)

set_target_properties(libchicken-static PROPERTIES
    PREFIX ""
    OUTPUT_NAME lib${CHICKEN_PROGRAM_PREFIX}chicken)

install(TARGETS libchicken-static
    EXPORT chicken-targets
    ARCHIVE DESTINATION ${INSTALL_LIBDIR})

set(CHICKEN_STATIC_LIBRARIES libchicken-static ${CHICKEN_EXTRA_LIBRARIES})

endif(BUILD_STATIC_LIBS)

if(BUILD_STATIC_PROGRAMS)
    add_chicken_executable(csi-static csi.scm STATIC
        OPTIONS ${PROGRAM_OPTIONS})
    set_target_properties(csi-static PROPERTIES
        OUTPUT_NAME ${CHICKEN_PROGRAM_PREFIX}csi-static)

    add_chicken_executable(chicken-bug chicken-bug.scm STATIC
        OPTIONS ${PROGRAM_OPTIONS})
    set_target_properties(chicken-bug PROPERTIES
        OUTPUT_NAME ${CHICKEN_PROGRAM_PREFIX}chicken-bug)

    install(TARGETS csi-static chicken-bug
        RUNTIME DESTINATION ${INSTALL_BINDIR})
endif()

add_chicken_module(setup-api setup-api.scm
    OPTIONS ${LIBRARY_OPTIONS})

add_chicken_module(setup-download setup-download.scm
    OPTIONS ${LIBRARY_OPTIONS}
    DEPENDS setup-api)

add_dependencies(chicken-install ${setupapi_MODULES})
add_dependencies(chicken-uninstall ${setupapi_MODULES})
add_dependencies(chicken-status ${setupapi_MODULES})

foreach(module ${setupapi_MODULES})
    install(TARGETS ${module} ${module}.import
        ARCHIVE DESTINATION ${INSTALL_EGGDIR}
        LIBRARY DESTINATION ${INSTALL_EGGDIR})
endforeach()

# chicken-extract

install(FILES ${CMAKE_HOME_DIRECTORY}/cmake/extract-depends.scm
    DESTINATION ${INSTALL_DATADIR})

# misc files

install(FILES types.db
    DESTINATION ${INSTALL_EGGDIR})

install(FILES chicken.h ${CHICKEN_CONFIG_H}
    DESTINATION ${INSTALL_INCLUDEDIR})

install(FILES setup.defaults
    DESTINATION ${INSTALL_DATADIR})

install(FILES
    ${PROJECT_SOURCE_DIR}/cmake/ChickenExtensionConfig.cmake.in
    ${PROJECT_SOURCE_DIR}/cmake/ChickenExtensionVersion.cmake.in
    ${PROJECT_SOURCE_DIR}/cmake/FindChicken.cmake
    ${PROJECT_SOURCE_DIR}/cmake/ChickenUse.cmake
    ${PROJECT_SOURCE_DIR}/cmake/ChickenRun.cmake
    DESTINATION ${INSTALL_DATADIR})

set(MAN_PAGES chicken csc csi chicken-install chicken-uninstall
    chicken-status chicken-profile chicken-bug)
foreach(man ${MAN_PAGES})
    install(FILES ${man}.1
        DESTINATION ${INSTALL_MANDIR}
        RENAME ${CHICKEN_PROGRAM_PREFIX}${man}.1)
endforeach()

install(FILES README LICENSE
    DESTINATION ${INSTALL_DOCDIR})

install(EXPORT chicken-targets
    DESTINATION ${INSTALL_DATADIR}
    NAMESPACE chicken_)

# config

include(CMakePackageConfigHelpers)

configure_package_config_file(cmake/chicken-config.cmake.in
    ${PROJECT_BINARY_DIR}/chicken-config.cmake
    INSTALL_DESTINATION ${INSTALL_DATADIR}
    PATH_VARS
        INSTALL_BINDIR
        INSTALL_LIBDIR
        INSTALL_EGGDIR
        INSTALL_DATADIR
        INSTALL_INCLUDEDIR
)

write_basic_package_version_file(
    ${PROJECT_BINARY_DIR}/chicken-config-version.cmake
    VERSION ${CHICKEN_VERSION}
    COMPATIBILITY SameMajorVersion)

install(FILES ${PROJECT_BINARY_DIR}/chicken-config.cmake
    DESTINATION ${INSTALL_DATADIR})
install(FILES ${PROJECT_BINARY_DIR}/chicken-config-version.cmake
    DESTINATION ${INSTALL_DATADIR})

# tests

add_subdirectory(tests EXCLUDE_FROM_ALL)

# cpack

set(CPACK_PACKAGE_NAME "CHICKEN")
set(CPACK_PACKAGE_VERSION_MAJOR 4)
set(CPACK_PACKAGE_VERSION_MINOR 9)
set(CPACK_PACKAGE_VERSION_PATCH 1)
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "A practical and portable Scheme system")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_SOURCE_DIR}/LICENSE")

if(UNIX)
    set(CPACK_GENERATOR STGZ)
elseif(MSVC)
    set(CPACK_GENERATOR NSIS)
endif()

include(CPack)
